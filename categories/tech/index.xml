<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>技术 on BsBlog</title><link>https://sorabs.cc/categories/tech/</link><description>Recent content in 技术 on BsBlog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://sorabs.cc/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 GPG 签名你的 Git Commit</title><link>https://sorabs.cc/posts/sign-git-commit-with-gpg/</link><pubDate>Sat, 01 Oct 2022 15:52:24 +0800</pubDate><guid>https://sorabs.cc/posts/sign-git-commit-with-gpg/</guid><description>&lt;img src="https://sorabs.cc/posts/sign-git-commit-with-gpg/cover.jpg" alt="Featured image of post 使用 GPG 签名你的 Git Commit" />&lt;h2 id="前言">前言&lt;/h2>
&lt;p>在 GitHub 上浏览许多大仓库时，常常能见到在 commit 信息旁边有一个绿色的标识，里面写着 Verified。这种一看就令人安心的标志，自己也想搞一个（）上网查了查资料，发现只要对提交到 GitHub 的 commit 使用 GPG 进行签名即可，步骤也不麻烦，遂进行一个记录。&lt;/p>
&lt;h2 id="什么是-gpg">什么是 GPG&lt;/h2>
&lt;div class="tip tip-quote">
&lt;div class="tip-header">&lt;/div>
&lt;div class="tip-content">&lt;p>GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880 (also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications. A wealth of frontend applications and libraries are available. GnuPG also provides support for S/MIME and Secure Shell (ssh).&lt;/p>
&lt;p>摘自 &lt;a class="link" href="https://gnupg.org/" target="_blank" rel="noopener"
>GPG 官网&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>简单来说，GPG (GNU Privacy Guard) 是由 GNU 组织提供的一款加密工具，并且是目前世界上最好用的加密工具之一。GPG 的用途十分广泛，而我们今天只是用它进行 git commit 的签名认证。&lt;/p>
&lt;h2 id="生成-gpg-key">生成 GPG Key&lt;/h2>
&lt;p>Windows 下安装 Git Bash 已经自带了 GPG 工具，可以使用 &lt;code>gpg --version&lt;/code> 验证：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; gpg --version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg (GnuPG) 2.2.29-unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">libgcrypt 1.9.3-unknown
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright (C) 2021 Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">License GNU GPL-3.0-or-later &amp;lt;https://gnu.org/licenses/gpl.html&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This is free software: you are free to change and redistribute it.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">There is NO WARRANTY, to the extent permitted by law.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Home: /c/Users/b1acksoil/.gnupg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Supported algorithms:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Pubkey: RSA, ELG, DSA, ECDH, ECDSA, EDDSA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Cipher: IDEA, 3DES, CAST5, BLOWFISH, AES, AES192, AES256, TWOFISH,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CAMELLIA128, CAMELLIA192, CAMELLIA256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hash: SHA1, RIPEMD160, SHA256, SHA384, SHA512, SHA224
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Compression: Uncompressed, ZIP, ZLIB, BZIP2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接着我们生成一个新的 GPG key：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">gpg&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-full-generate-key&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提示输入算法类型，密钥长度，选择默认即可。然后输入自己的邮箱、名称和密钥备注，最后会弹出一个窗口让你设置密码。&lt;/p>
&lt;p>生成好密钥后会将密钥的 ID 输出在屏幕上，忘记了也没关系，可以使用 &lt;code>gpg --list-keys&lt;/code> 查看。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; gpg --list-keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: checking the trustdb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: marginals needed: 3 completes needed: 1 trust model: pgp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/c/Users/b1acksoil/.gnupg/pubring.kbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-------------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub rsa3072 2022-10-01 [SC]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 114514191981011451419198101145141919810
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid [ultimate] b1acksoil (for git commit) &amp;lt;dev@sorabs.cc&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsa3072 2022-10-01 [E]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>pub 一栏，在密钥算法和日期下面，就是我们的密钥 ID。&lt;/p>
&lt;h2 id="使用-gpg-对-git-commit-签名">使用 GPG 对 git commit 签名&lt;/h2>
&lt;p>在对 git commit 进行签名之前，我们需要配置一下 git，让它知道我们使用了这个新创建的 GPG 密钥签名 commit：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ git config --global user.signingkey 你的密钥ID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了试试签名的效果，我们随便创建一个测试用的 git 仓库，并进行一次提交：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ mkdir testgpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd testgpg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ touch abc.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git add .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git commit -m -S &amp;#34;test gpg key&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里提交时的 &lt;code>-S&lt;/code> 选项，表示我们使用 GPG 签名这次提交。&lt;/p>
&lt;p>不同于以往直接提交成功，git 弹出一个窗口要求你输入密码，也就是我们设置的密钥密码。正确输入后便会完成提交，也就完成了我们第一次由 GPG 验证过的 commit。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/sign-git-commit-with-gpg/enter-passphrase.png"
width="944"
height="570"
srcset="https://sorabs.cc/posts/sign-git-commit-with-gpg/enter-passphrase_hu64ba61532ba9083130a953a1358b5f88_21967_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/sign-git-commit-with-gpg/enter-passphrase_hu64ba61532ba9083130a953a1358b5f88_21967_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="输入密码"
class="gallery-image"
data-flex-grow="165"
data-flex-basis="397px"
>&lt;/p>
&lt;div class="tip tip-note">
&lt;div class="tip-header">不想每次都输入 -S 选项？&lt;/div>
&lt;div class="tip-content">可以配置 &lt;code>git config --global commit.gpgsign true&lt;/code>，这样每一次提交都会自动签名。&lt;/div>
&lt;/div>
&lt;h2 id="将密钥导入-github">将密钥导入 GitHub&lt;/h2>
&lt;p>本地签名好了，我们需要在 GitHub 里添加我们的密钥，否则即使签名了 GitHub 不认，也就没有小绿标了。&lt;/p>
&lt;p>首先查看我们的 GPG 公钥：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;gt; gpg --armor --export 你的密钥ID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----BEGIN PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">（你的公钥）
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-----END PGP PUBLIC KEY BLOCK-----
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>登录 GitHub，点击头像 - Settings，然后打开 SSH and GPG keys 选项卡。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/sign-git-commit-with-gpg/add-gpg-key-on-github.png"
width="1374"
height="628"
srcset="https://sorabs.cc/posts/sign-git-commit-with-gpg/add-gpg-key-on-github_hu7495857d1e53226c51188097c25358f4_66549_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/sign-git-commit-with-gpg/add-gpg-key-on-github_hu7495857d1e53226c51188097c25358f4_66549_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="往下翻到这里"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="525px"
>&lt;/p>
&lt;p>点击 New GPG key，输入想要的名称，然后把上面获取的公钥完整地（包括 &lt;code>-----BEGIN PGP PUBLIC KEY BLOCK-----&lt;/code> 和 &lt;code>-----END PGP PUBLIC KEY BLOCK-----&lt;/code>）复制到下面的文本框内，然后点击 Add GPG key 按钮完成。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/sign-git-commit-with-gpg/edit-gpg-key.png"
width="1366"
height="902"
srcset="https://sorabs.cc/posts/sign-git-commit-with-gpg/edit-gpg-key_hu7e5903b000c7722d0085df9f41982d7a_34525_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/sign-git-commit-with-gpg/edit-gpg-key_hu7e5903b000c7722d0085df9f41982d7a_34525_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="输入页面"
class="gallery-image"
data-flex-grow="151"
data-flex-basis="363px"
>&lt;/p>
&lt;p>这时我们就成功地让 GitHub “认识” 了我们的密钥了。本地执行一个提交并 push 到 GitHub 上，你会看到提交信息旁边有一个闪亮的 Verified 标识。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/sign-git-commit-with-gpg/github-verified.png"
width="664"
height="634"
srcset="https://sorabs.cc/posts/sign-git-commit-with-gpg/github-verified_hu9e4a28e33fe5d7a73390c6deb21c3c2e_60147_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/sign-git-commit-with-gpg/github-verified_hu9e4a28e33fe5d7a73390c6deb21c3c2e_60147_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Verified!"
class="gallery-image"
data-flex-grow="104"
data-flex-basis="251px"
>&lt;/p>
&lt;h2 id="附加信任-github-的-gpg-公钥">附加：信任 GitHub 的 GPG 公钥&lt;/h2>
&lt;p>虽然我们本地的 commit 已经是签名过的了，但不在本地的，例如直接在 GitHub 网页端执行的提交，则是由 GitHub 代为签名，这导致我们无法验证这些签名的真实性。&lt;/p>
&lt;p>信任 GitHub 的公钥即可解决这个问题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ curl https://github.com/web-flow.gpg | gpg --import
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>回车执行，提示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gpg: key 4AEE18F83AFDEB23: public key &amp;#34;GitHub (web-flow commit signing) &amp;lt;noreply@github.com&amp;gt;&amp;#34; imported
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>4AEE18F83AFDEB23&lt;/code> （可能有变化，以实际情况为准）就是 GitHub 的公钥 ID。接下来使用自己的密钥为其签名：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ gpg --sign-key 4AEE18F83AFDEB23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub rsa2048/4AEE18F83AFDEB23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> created: 2017-08-16 expires: never usage: SC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> trust: unknown validity: full
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[ full ] (1). GitHub (web-flow commit signing) &amp;lt;noreply@github.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub rsa2048/4AEE18F83AFDEB23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> created: 2017-08-16 expires: never usage: SC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> trust: unknown validity: full
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Primary key fingerprint: 5DE3 E050 9C47 EA3C F04A 42D3 4AEE 18F8 3AFD EB23
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> GitHub (web-flow commit signing) &amp;lt;noreply@github.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Are you sure that you want to sign this key with your
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">key?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Really sign? (y/N) y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入 &lt;code>y&lt;/code> 并回车确认，我们便可以看到所有的签名都得到了验证。&lt;/p></description></item><item><title>使用 WSL2 部署 Arch Linux 环境</title><link>https://sorabs.cc/posts/wsl2-arch/</link><pubDate>Sat, 01 Oct 2022 09:38:08 +0800</pubDate><guid>https://sorabs.cc/posts/wsl2-arch/</guid><description>&lt;img src="https://sorabs.cc/posts/wsl2-arch/cover.jpg" alt="Featured image of post 使用 WSL2 部署 Arch Linux 环境" />&lt;p>最近入了 Arch Linux 的坑，手上没有空闲的机子可以装着玩，虚拟机又有点膈应的感觉，就找了找资料在 WSL2 上装了体验一下。&lt;/p>
&lt;p>关于 WSL1 和 WSL2 的区别，不在本文的讨论范围内，可以前往&lt;a class="link" href="https://learn.microsoft.com/zh-cn/windows/wsl/compare-versions" target="_blank" rel="noopener"
>微软的官方说明&lt;/a>查看。&lt;/p>
&lt;p>本文中，以 &lt;code>&amp;gt;&lt;/code> 开头的命令为 Powershell 命令，&lt;code>#&lt;/code> 开头为 Arch 中的 &lt;code>root&lt;/code> 用户命令，&lt;code>$&lt;/code> 开头为 Arch 中的普通用户命令。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;ul>
&lt;li>Windows 10 2004 版本或以上（我使用的是 Windows 11）&lt;/li>
&lt;li>可选功能中打开&lt;strong>适用于 Linux 的 Windows 子系统&lt;/strong>和&lt;strong>虚拟机平台&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>首先前往 &lt;a class="link" href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener"
>&lt;strong>这里&lt;/strong>&lt;/a> 下载 WSL 的内核更新包，不然没法安装。&lt;/p>
&lt;p>安装后将 WSL 的默认版本设置为 WSL2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">wsl&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-set-default-version&lt;/span> &lt;span class="n">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-arch">安装 Arch&lt;/h2>
&lt;p>前往 &lt;a class="link" href="https://github.com/yuk7/ArchWSL" target="_blank" rel="noopener"
>项目仓库 (yuk7/ArchWSL)&lt;/a> 的 &lt;a class="link" href="https://github.com/yuk7/ArchWSL/releases" target="_blank" rel="noopener"
>Releases&lt;/a> 页面下载最新的 &lt;code>Arch.zip&lt;/code>，并解压到具有写权限的空文件夹里。留意 &lt;code>Arch.exe&lt;/code> 的名称，&lt;code>.exe&lt;/code> 前的部分会作为稍后在 WSL 内注册的发行版名称，例如改名成 &lt;code>ArchLinux.exe&lt;/code>，稍后的实例就叫 &lt;code>ArchLinux&lt;/code>。&lt;/p>
&lt;div class="tip tip-note">
&lt;div class="tip-header">多个 Arch 共存&lt;/div>
&lt;div class="tip-content">由于这里的 Arch 是通过文件安装，只要将 &lt;code>exe&lt;/code> 文件复制并改名即可。注意改名后的文件不要和已有的实例名称重复。&lt;/div>
&lt;/div>
&lt;p>双击打开 &lt;code>Arch.exe&lt;/code>，程序会自动注册 rootfs 和注册表配置。&lt;/p>
&lt;h2 id="创建默认用户">创建默认用户&lt;/h2>
&lt;p>直接使用 &lt;code>root&lt;/code> 用户很不安全，这里我们创建一个新的用户代替 &lt;code>root&lt;/code> 进行日常使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># useradd -m -G wheel -s /bin/bash bs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 &lt;code>bs&lt;/code> 是用户名称，将其换成你自己的。然后为新用户设置密码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># passwd bs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>为了使新用户可以使用 &lt;code>sudo&lt;/code> 权限，编辑 &lt;code>/etc/sudoers&lt;/code> 文件，找到 &lt;code>root ALL=(ALL:ALL) ALL&lt;/code>，在其下添加一行 &lt;code>bs ALL=(ALL:ALL) ALL&lt;/code> （&lt;code>bs&lt;/code> 同样换成刚刚的用户名）；并找到 &lt;code>#%wheel ALL=(ALL:ALL) ALL&lt;/code>，将其取消注释（去掉最前面的 &lt;code>#&lt;/code>）&lt;/p>
&lt;div class="tip tip-note">
&lt;div class="tip-header">找不到编辑器&lt;/div>
&lt;div class="tip-content">如果没有自己常用的编辑器（如 vim），可以先跳到下面的 Pacman 配置小节，然后自行安装。&lt;/div>
&lt;/div>
&lt;p>改好了是这样的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">root ALL=(ALL:ALL) ALL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bs ALL=(ALL:ALL) ALL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">%wheel ALL=(ALL:ALL) ALL
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后使用 &lt;code>exit&lt;/code> 退出 Arch 交互界面，打开 Powershell，切换到 Arch 目录，输入以下命令将默认登录用户切换为刚刚创建的新用户：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-powershell" data-lang="powershell">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="n">Arch&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">exe&lt;/span> &lt;span class="n">config&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">-default-user&lt;/span> &lt;span class="n">bs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="配置-pacman">配置 Pacman&lt;/h2>
&lt;p>打开 Arch.exe 进入命令行。&lt;/p>
&lt;p>由于众所周知的原因，国内访问 Arch 的软件源十分缓慢，这里将源换为&lt;a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/help/archlinux/" target="_blank" rel="noopener"
>清华大学开源镜像站的源&lt;/a>。&lt;/p>
&lt;p>编辑 &lt;code>/etc/pacman.d/mirrorlist&lt;/code>，往下翻找到 China 一栏，将 &lt;code>https://mirrors.tuna.tsinghua.edu.cn&lt;/code> 行取消注释。也可以多取消几个注释作为后备。如果懒得找也可以直接在文件开头添加：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初始化 Pacman 的密钥环：&lt;/p>
&lt;div class="tip tip-note">
&lt;div class="tip-header">未创建新用户&lt;/div>
&lt;div class="tip-content">如果刚刚没有创建用来代替 &lt;code>root&lt;/code> 的新用户，请将本节命令中的 &lt;code>sudo&lt;/code> 去除，&lt;/div>
&lt;/div>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo pacman-key --init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman-key --populate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo pacman -Syy archlinux-keyring
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行滚动更新：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo pacman -Syu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="tip tip-success">
&lt;div class="tip-header">搭建完成&lt;/div>
&lt;div class="tip-content">这样就配置好了一个基本的 Arch Linux 环境了，但仍然是一个空壳子，接下来给它配置一些常用服务。&lt;/div>
&lt;/div>
&lt;h2 id="安装包管理器-yay">安装包管理器 yay&lt;/h2>
&lt;p>yay 是一个广泛使用的 AUR Helper，解决了 pacman 无法安装 AUR 软件的问题，同时完全兼容 pacman 操作。&lt;/p>
&lt;p>首先安装必要软件包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo pacman -S base-devel git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装 &lt;code>yay-bin&lt;/code>（如果直接安装 &lt;code>yay&lt;/code> 则需要自己编译）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> ~
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git clone https://aur.archlinux.org/yay-bin.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> yay-bin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ makepkg -si
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ yay
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装-oh-my-zsh">安装 oh-my-zsh&lt;/h2>
&lt;p>oh-my-zsh 是一个常用的 zsh 框架，提供了许多美观的主题和实用插件，能极大提升 shell 下的效率。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ yay -S zsh curl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sh -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装基本插件，这里我安装了自己常用的 &lt;code>zsh-autosuggestions&lt;/code> 和 &lt;code>zsh-syntax-highlighting&lt;/code> 来提供自动补全和语法高亮。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> ~/.oh-my-zsh/plugins
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/zsh-users/zsh-autosuggestions.git --depth &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git --depth &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>编辑 &lt;code>~/.zshrc&lt;/code>，找到 &lt;code>plugins&lt;/code>，在 &lt;code>git&lt;/code> 后面添加插件名称，使用空格或空行分隔。也可以往上找到 &lt;code>ZSH_THEME&lt;/code> 并修改主题。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/wsl2-arch/omz-preview.png"
width="678"
height="164"
srcset="https://sorabs.cc/posts/wsl2-arch/omz-preview_huecbecf8c43e4bdff720ec85fb621e261_12062_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/wsl2-arch/omz-preview_huecbecf8c43e4bdff720ec85fb621e261_12062_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="最终效果，主题使用 ys"
class="gallery-image"
data-flex-grow="413"
data-flex-basis="992px"
>&lt;/p></description></item><item><title>树莓派搭建 FTP 服务器实现局域网文件共享</title><link>https://sorabs.cc/posts/raspberrypi-ftp-server/</link><pubDate>Wed, 14 Sep 2022 20:34:14 +0800</pubDate><guid>https://sorabs.cc/posts/raspberrypi-ftp-server/</guid><description>&lt;img src="https://sorabs.cc/posts/raspberrypi-ftp-server/cover.jpg" alt="Featured image of post 树莓派搭建 FTP 服务器实现局域网文件共享" />&lt;h2 id="起因">起因&lt;/h2>
&lt;p>经常需要在电脑和手机之间互传文件，想了不少办法，最早是使用 QQ 等聊天工具进行文件传输，效率十分低下；后来找到了 &lt;a class="link" href="https://snapdrop.net/" target="_blank" rel="noopener"
>SnapDrop&lt;/a> 这款工具，可以以类似面对面快传的方式在局域网内传输文件，提高了些许效率，但还是感觉到些许别扭。于是开始找寻一种更为优雅的文件传输方式，想到手里有一个半吃灰的树莓派，就开始着手搭建自己的 FTP 文件服务器。&lt;/p>
&lt;div class="tip tip-quote">
&lt;div class="tip-header">什么是 FTP&lt;/div>
&lt;div class="tip-content">文件传输协议（File Transfer Protocol，缩写 &lt;strong>FTP&lt;/strong>）是一个用于在计算机网络上在客户端和服务器之间进行文件传输的应用层协议。&lt;/div>
&lt;/div>
&lt;p>相比 WebDav 等其他传输协议，纯 FTP 的安全性略显低下，但对于小型自用而言已经绰绰有余。&lt;/p>
&lt;h2 id="搭建">搭建&lt;/h2>
&lt;div class="tip tip-info">
&lt;div class="tip-header">关于树莓派&lt;/div>
&lt;div class="tip-content">本文中使用的树莓派信息如下：&lt;br>
型号：4B&lt;br>
RAM：4GB&lt;br>
系统：Ubuntu Server 22.04&lt;/div>
&lt;/div>
&lt;p>首先安装软件包 &lt;code>vsftpd&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt install vsftpd -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安装过程中会自动创建一个名为 &lt;code>ftp&lt;/code> 的用户，我们给它设置一个密码作为稍后的登录密码（若打算开启匿名登录可跳过）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo passwd ftp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="tip tip-note">
&lt;div class="tip-header">FTP 文件存放位置&lt;/div>
&lt;div class="tip-content">FTP 服务开启后的文件存储位置就是 &lt;code>frp&lt;/code> 用户的家目录，位于 &lt;code>/srv/ftp&lt;/code>&lt;/div>
&lt;/div>
&lt;p>密码更改完成后，选用喜欢的编辑器打开 FTP 服务器配置文件 &lt;code>/etc/vsftpd.conf&lt;/code>，按照需求取消注释（去掉行首的 &lt;code>#&lt;/code> 号）或修改相应选项（如果找不到被注释的选项在哪里也可以直接在文件末尾添加，格式为 &lt;code>选项=值&lt;/code>）。这里列出几个常用的，&lt;code>YES/NO&lt;/code> 分别对应是/否：&lt;/p>
&lt;p>&lt;strong>通用&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>local_enable&lt;/code>&lt;/strong>：是否允许本地用户登录&lt;br>
&lt;strong>&lt;code>write_enable&lt;/code>&lt;/strong>：是否允许写入操作（上传文件、新建文件夹等）&lt;br>
&lt;strong>&lt;code>utf8_filesystem&lt;/code>&lt;/strong>：启用 UTF-8 支持&lt;/p>
&lt;p>&lt;strong>匿名登录相关&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>anonymous_enable&lt;/code>&lt;/strong>：是否允许匿名登录&lt;br>
&lt;strong>&lt;code>anon_upload_enable&lt;/code>&lt;/strong>：是否允许匿名用户上传文件&lt;br>
&lt;strong>&lt;code>anon_mkdir_write_enable&lt;/code>&lt;/strong>：是否允许匿名用户新建文件夹&lt;/p>
&lt;p>&lt;strong>&lt;a class="link" href="https://zh.wikipedia.org/wiki/Chroot" target="_blank" rel="noopener"
>Chroot&lt;/a> 相关&lt;/strong>&lt;/p>
&lt;p>&lt;strong>&lt;code>chroot_local_user&lt;/code>&lt;/strong>：是否将连接 FTP 的本地用户的根目录限制为其家目录（&lt;code>/home/&amp;lt;username&amp;gt;&lt;/code>）&lt;br>
&lt;strong>&lt;code>chroot_list_enable&lt;/code>&lt;/strong>：启用 chroot 白名单，只有在其中的用户&lt;strong>才会&lt;/strong>被 chroot（如果把 &lt;code>chroot_local_user&lt;/code> 设置为 &lt;code>YES&lt;/code> 将变为黑名单，只有在其中的用户&lt;strong>不会&lt;/strong>被 chroot）&lt;br>
&lt;strong>&lt;code>chroot_list_file&lt;/code>&lt;/strong>：chroot 黑/白名单的文件路径，文件中填写用户名，一行一个&lt;/p>
&lt;p>注：如果只设置 &lt;code>chroot_local_user&lt;/code> 为 &lt;code>YES&lt;/code> 而不设置黑/白名单，会对所有连接 FTP 的本地用户进行 chroot。&lt;/p>
&lt;p>修改好配置后重启 FTP 服务：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo systemctl restart vsftpd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="连接">连接&lt;/h2>
&lt;p>查看树莓派 IP，可以使用 &lt;code>ip addr&lt;/code> 或 &lt;code>ifconfig&lt;/code> 等等方式。这里举例为 &lt;code>192.168.0.114&lt;/code>，后续命令中记得替换成自己的。&lt;/p>
&lt;p>使用 FTP 工具进行连接测试，这里先使用 Linux 和 Windows 都自带的 &lt;code>ftp&lt;/code> 命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ftp 192.168.0.114
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提示输入用户名和密码，用户名输入 &lt;code>ftp&lt;/code>，密码输入之前设置的密码，若设置了匿名就直接留空回车。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Connected to 192.168.0.114.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">220 (vsFTPd 3.0.5)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name (192.168.0.114:bs): ftp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">331 Please specify the password.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Password:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">230 Login successful.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ftp&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>成功进入 FTP Shell 后可以输入 &lt;code>ls&lt;/code>，&lt;code>pwd&lt;/code> 等命令进行测试，使用 &lt;code>quit&lt;/code> 退出。&lt;/p>
&lt;div class="tip tip-success">
&lt;div class="tip-header">搭建完成&lt;/div>
&lt;div class="tip-content">&lt;p>一个简单的 FTP 服务器已经搭建完毕，可以使用各种 FTP 工具连接使用。&lt;/p>
&lt;p>如果搭建过程中遇到问题，可以参考文章后面的问题解决部分。&lt;/p>
&lt;/div>
&lt;/div>
&lt;h2 id="体验">体验&lt;/h2>
&lt;p>搭建完成后，我分别使用移动端的 MT 管理器、和 Windows 自带的网络位置进行了测试。在 MT 管理器下连接后操作十分流畅，上传/下载的速度也很快。而 Windows 自带的网络位置则十分难用，打开文件只打开了一个空的 Edge，复制文件十分缓慢，新建文件夹需要延迟很久，删除文件也经常删不掉。&lt;del>fkms&lt;/del>&lt;/p>
&lt;p>但尽管如此，通过 FTP 传输文件仍然带来了一种全新的体验：手机上将文件移进”文件夹“，转眼就能在电脑上移出来使用，做到了几近原生、无缝的传输体验。相信如果解决了 Windows 端的工具问题，效率会大大提升。&lt;/p>
&lt;h2 id="问题解决">问题解决&lt;/h2>
&lt;h3 id="无法登录进-ftp-shell">无法登录进 FTP Shell&lt;/h3>
&lt;div class="tip tip-quote">
&lt;div class="tip-header">Ubuntu 官网的说明&lt;/div>
&lt;div class="tip-content">&lt;p>To allow users with a shell of /usr/sbin/nologin access to FTP, but have no shell access, edit /etc/shells adding the nologin shell.&lt;/p>
&lt;p>This is necessary because, by default vsftpd uses PAM for authentication, and the /etc/pam.d/vsftpd configuration file contains:&lt;/p>
&lt;p>&lt;code>auth&lt;/code> &lt;code>required&lt;/code>  &lt;code>pam_shells.so&lt;/code>&lt;/p>
&lt;p>The shells PAM module restricts access to shells listed in the /etc/shells file.&lt;/p>
&lt;p>摘自&lt;a class="link" href="https://ubuntu.com/server/docs/service-ftp" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>解决办法：编辑 &lt;code>/etc/shells&lt;/code>，在文件末尾添加一行 &lt;code>/usr/sbin/nologin&lt;/code>&lt;/p>
&lt;h3 id="550-create-directory-operation-failed">550 create directory operation failed&lt;/h3>
&lt;p>如果设置了 &lt;code>write_enable&lt;/code> 后仍不能创建文件夹，需要确保根目录具有可执行权限。执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">777&lt;/span> -R /srv/ftp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="vsftpd-refusing-to-run-with-writable-root-inside-chroot">vsftpd: refusing to run with writable root inside chroot&lt;/h3>
&lt;p>如果设置了 chroot 后无法新建文件夹/上传文件，并提示以上信息，是因为 &lt;code>2.3.5&lt;/code> 版本后 &lt;code>vsftpd&lt;/code> 加强了安全检查，用户的主目录不能再有写权限，如果检查到就会报错。可以在配置文件中添加 &lt;code>allow_writeable_chroot=YES&lt;/code> 来解决。&lt;/p>
&lt;p>参考自&lt;a class="link" href="https://blog.csdn.net/bluishglc/article/details/42399439" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/p></description></item><item><title>星露谷模组加载器 —— SMAPI 的安装</title><link>https://sorabs.cc/posts/smapi-install/</link><pubDate>Tue, 13 Sep 2022 19:34:50 +0800</pubDate><guid>https://sorabs.cc/posts/smapi-install/</guid><description>&lt;p>一直听说&lt;a class="link" href="https://store.steampowered.com/app/413150/Stardew_Valley/?l=schinese" target="_blank" rel="noopener"
>星露谷&lt;/a>对于 Mod 的支持十分完善，这次打算自己尝试一番。&lt;/p>
&lt;div class="tip tip-info">
&lt;div class="tip-header">注意&lt;/div>
&lt;div class="tip-content">本文仅针对 Windows 平台，其他平台方法大同小异，可以直接参照&lt;a class="link" href="https://zh.stardewvalleywiki.com/%E6%A8%A1%E7%BB%84:%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/%E5%85%A5%E9%97%A8" target="_blank" rel="noopener"
>官方 Wiki&lt;/a>。&lt;/div>
&lt;/div>
&lt;p>首先到 &lt;a class="link" href="https://smapi.io/" target="_blank" rel="noopener"
>SMAPI 官网&lt;/a>下载最新的安装包，可以选择从 NexusMods (N 网) 下载，也可以直接下载 (Direct download)。截至本文，SMAPI 的最新版本为 &lt;code>3.16.2&lt;/code>。&lt;/p>
&lt;p>把下载下来的 &lt;code>SMAPI-&amp;lt;版本&amp;gt;-installer.zip&lt;/code> 解压到任意位置，打开里面的 &lt;code>install on Windows.bat&lt;/code>，安装脚本会自动检测游戏的安装位置。如果没有找到会提示以下信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Oops, couldn&amp;#39;t find the game automatically.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type the file path to the game directory (the one containing &amp;#39;Stardew Valley.dll&amp;#39;), then press enter.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>出现这种情况，首先找到星露谷的安装目录，若为 Steam 安装可以直接右键库里的星露谷，选择管理 - 浏览本地文件，然后复制打开的文件夹路径（例如我的是 &lt;code>D:\Steam\steamapps\common\Stardew Valley&lt;/code>），再粘贴进终端内并回车。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">What do you want to do?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[1] Install SMAPI.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[2] Uninstall SMAPI.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type 1 or 2, then press enter.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>输入 1 并回车继续安装。日后如果想要卸载 SMAPI，可以再次运行此脚本并选择 2 卸载。&lt;/p>
&lt;p>如果出现以下信息，则为安装成功：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">SMAPI is installed! If you use Steam, set your launch options to enable achievements (see smapi.io/install):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;D:\Steam\steamapps\common\Stardew Valley\StardewModdingAPI.exe&amp;#34; %command%
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If you don&amp;#39;t use Steam, launch StardewModdingAPI.exe in your game folder to play with mods.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>提示信息中指出，如果使用 Steam 启动游戏，可以设置启动项来确保安装 SMAPI 后也能正常获得成就。&lt;/p>
&lt;div class="tip tip-warn">
&lt;div class="tip-header">注意&lt;/div>
&lt;div class="tip-content">在配置Steam启动项之前，需要确保您的游戏路径里没有中文，否则将设置失败。&lt;/div>
&lt;/div>
&lt;p>首先复制终端窗口中给出的启动指令（如上文，为 &lt;code>&amp;quot;D:\Steam\steamapps\common\Stardew Valley\StardewModdingAPI.exe&amp;quot; %command%&lt;/code>），Steam 中右键星露谷打开属性，在“通用”选项卡中把复制的指令粘贴进“启动选项”一栏，保存即可。&lt;/p>
&lt;p>至此已经完成了 SMAPI 的安装，至于添加 Mod 下次再讲 &lt;del>（咕咕咕（（&lt;/del>&lt;/p></description></item><item><title>手动编译像素画软件 Aseprite</title><link>https://sorabs.cc/posts/manually-compile-aseprite/</link><pubDate>Wed, 09 Feb 2022 19:00:12 +0800</pubDate><guid>https://sorabs.cc/posts/manually-compile-aseprite/</guid><description>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/cover.jpg" alt="Featured image of post 手动编译像素画软件 Aseprite" />&lt;p>最近学 2D 游戏开发，想自己画点像素画，就去找了找有什么好用的像素画软件。首先就想到了大名鼎鼎的 Aseprite，去 Steam 上搜了下，70RMB。&lt;/p>
&lt;p>对于穷学生党来说 70 也不少了（）何况我年初收了一台米板 2，目前处于囊中羞涩的状态。搜索一番发现 Aseprite 居然是在 GitHub 上开源的，官方 repo 里也提供了编译说明，遂自行编译之。&lt;/p>
&lt;p>本文仅涉及 Windows 平台下的编译，若是 macOS 或是 Linux 平台可自行查看&lt;a class="link" href="https://github.com/aseprite/aseprite/blob/main/INSTALL.md" target="_blank" rel="noopener"
>官方编译说明&lt;/a>（方法大同小异，甚至更简单，因为不用装 VS）&lt;/p>
&lt;p>平台：Windows 10&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;h3 id="安装-visual-studio-2019">安装 Visual Studio 2019+&lt;/h3>
&lt;p>Windows 下的编译需要用到 Visual Studio Community （微软的 IDE）的 2019 或以上的版本，我使用的是 VS2022&lt;/p>
&lt;p>前往 &lt;a class="link" href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener"
>Visual Studio Downloads&lt;/a> 下载社区版&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/vs-downloads.jpg"
width="2012"
height="989"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/vs-downloads_hu52b2b151f3a0893bb81dd4c8ba77365d_134625_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/vs-downloads_hu52b2b151f3a0893bb81dd4c8ba77365d_134625_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="下载社区版"
class="gallery-image"
data-flex-grow="203"
data-flex-basis="488px"
>&lt;/p>
&lt;p>下载完成打开安装程序，选择 “使用 C++ 的桌面开发”，并在右侧&lt;strong>至少&lt;/strong>勾选 “MSVC C++ x64/x86 生成工具” 和 “Windows 10 SDK”，然后点击安装。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/vs-install.jpg"
width="1800"
height="1080"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/vs-install_hua6a532aed160158f87b4c71442e5b1bd_293359_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/vs-install_hua6a532aed160158f87b4c71442e5b1bd_293359_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="注意右侧选项"
class="gallery-image"
data-flex-grow="166"
data-flex-basis="400px"
>&lt;/p>
&lt;h3 id="安装-cmake">安装 Cmake&lt;/h3>
&lt;p>前往 &lt;a class="link" href="https://cmake.org/download/" target="_blank" rel="noopener"
>Cmake 官网&lt;/a>，在下方的 Binary distributions 中找到最新的 msi 安装文件并下载。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/cmake-downloads.jpg"
width="1667"
height="574"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/cmake-downloads_huc76bc216b580e239f188d1e0c414d590_147889_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/cmake-downloads_huc76bc216b580e239f188d1e0c414d590_147889_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="64位系统选择第一个，32位选择第三个"
class="gallery-image"
data-flex-grow="290"
data-flex-basis="697px"
>&lt;/p>
&lt;p>安装时选择第二个或者第三个就不用自己配置环境变量：&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/cmake-install.jpg"
width="988"
height="769"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/cmake-install_hu69e658707050d0da87e3012c65a35342_94751_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/cmake-install_hu69e658707050d0da87e3012c65a35342_94751_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="选择 Add to PATH"
class="gallery-image"
data-flex-grow="128"
data-flex-basis="308px"
>&lt;/p>
&lt;p>记下 Cmake 的安装目录，稍后会用到。&lt;/p>
&lt;div class="tip tip-warn">
&lt;div class="tip-header">关于 MinGW&lt;/div>
&lt;div class="tip-content">Aseprite 编译不支持 MinGW，所以对于 MinGW 用户，需要将环境变量中的 MinGW 删除。&lt;/div>
&lt;/div>
&lt;h3 id="安装-ninja">安装 Ninja&lt;/h3>
&lt;p>前往 &lt;a class="link" href="https://github.com/ninja-build/ninja/releases" target="_blank" rel="noopener"
>Ninja Releases&lt;/a> 下载 &lt;code>ninja-win.zip&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/ninja-downloads.jpg"
width="2014"
height="1492"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/ninja-downloads_huf4492e5958362d4fc793101be2cb264b_231604_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/ninja-downloads_huf4492e5958362d4fc793101be2cb264b_231604_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="下载 ninja-win.zip"
class="gallery-image"
data-flex-grow="134"
data-flex-basis="323px"
>&lt;/p>
&lt;p>打开 Cmake 的安装目录，并把 &lt;code>ninja-win.zip&lt;/code> 中的 &lt;code>ninja.exe&lt;/code> 解压到 &lt;code>&amp;lt;Cmake安装目录&amp;gt;\bin&lt;/code> 下&lt;/p>
&lt;h3 id="下载-skia-m96">下载 Skia-m96&lt;/h3>
&lt;p>前往 &lt;a class="link" href="https://github.com/aseprite/skia/releases" target="_blank" rel="noopener"
>Skia Releases&lt;/a> 根据系统位数下载 &lt;code>Skia-Windows-Release.zip&lt;/code>，我的系统是 64 位的所以下载 x64 版本。
注意下载的是 &lt;strong>m96&lt;/strong> 版本，不要下错了。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/skia-downloads.jpg"
width="2014"
height="2131"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/skia-downloads_huecf481546a2ac637dac3775a1d303de6_425761_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/skia-downloads_huecf481546a2ac637dac3775a1d303de6_425761_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="下载 skia"
class="gallery-image"
data-flex-grow="94"
data-flex-basis="226px"
>&lt;/p>
&lt;p>下载完解压好，记下位置，放在一旁备用。&lt;/p>
&lt;h2 id="编译-aseprite">编译 Aseprite&lt;/h2>
&lt;h3 id="下载-aseprite-源码">下载 Aseprite 源码&lt;/h3>
&lt;p>前往 &lt;a class="link" href="https://github.com/aseprite/aseprite/releases" target="_blank" rel="noopener"
>Aseprite Releases&lt;/a> 下载 &lt;code>Aseprite-&amp;lt;version&amp;gt;-Source.zip&lt;/code> 并解压，会使用 git 的也可以直接克隆仓库 &lt;code>https://github.com/aseprite/aseprite.git&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/aseprite-source-downloads.jpg"
width="2014"
height="1425"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/aseprite-source-downloads_hu75c6e50a8b7ed0e0dbced6dce848e499_231368_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/aseprite-source-downloads_hu75c6e50a8b7ed0e0dbced6dce848e499_231368_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="下载 Aseprite--Source.zip"
class="gallery-image"
data-flex-grow="141"
data-flex-basis="339px"
>&lt;/p>
&lt;h3 id="开始编译">开始编译&lt;/h3>
&lt;p>在开始菜单的 Visual Studio 文件夹里找到 x64 Native Tools Command Prompt for VS（32 位打开 x86）&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/manually-compile-aseprite/open-vs-prompt.jpg"
width="544"
height="870"
srcset="https://sorabs.cc/posts/manually-compile-aseprite/open-vs-prompt_hubdfb7d6bd0f922df81ea69efccd5da0d_61768_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/manually-compile-aseprite/open-vs-prompt_hubdfb7d6bd0f922df81ea69efccd5da0d_61768_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="打开 VS Prompt"
class="gallery-image"
data-flex-grow="62"
data-flex-basis="150px"
>&lt;/p>
&lt;p>初始化完成后输入 &lt;code>cd &amp;lt;Aseprite源码目录&amp;gt;&lt;/code> 切换到源码目录下，如果在另一个分区则需要先用 &lt;code>&amp;lt;盘符&amp;gt;:&lt;/code> 切换。如默认打开了 &lt;code>D:\Microsoft Visual Studio\2022\Community&lt;/code>，而我的源码在 &lt;code>C:\Users\b1acksoil\Downloads\Aseprite-Source&lt;/code> 里：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">C:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd C:\Users\b1acksoil\Downloads\Aseprite-Source
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>依次输入以下命令，第三条命令中将尖括号的内容（包括尖括号）替换为刚刚下载 Skia 解压后的文件夹：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">mkdir build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cd build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLAF_BACKEND=skia -DSKIA_DIR=&amp;#34;&amp;lt;Skia目录&amp;gt;&amp;#34; -DSKIA_LIBRARY_DIR=&amp;#34;&amp;lt;Skia目录&amp;gt;\out\Release-x64&amp;#34; -DSKIA_LIBRARY=&amp;#34;&amp;lt;Skia目录&amp;gt;\out\Release-x64\skia.lib&amp;#34; -G Ninja ..
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>随后等待第一段编译，时间取决于你的电脑性能。结束后输入：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ninja aseprite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>期间最好不要做其他事情，性能差的电脑可以把后台清一清，否则可能会卡到一半。可以开个任务管理器看看，编译很占 CPU，如果 CPU 占用突然下去了并且命令行长时间不动了，就是卡住了，使用 &lt;code>Ctrl+C&lt;/code> 终止，输入 &lt;code>cd ..&lt;/code>，删除 Aseprite 源码下的 build 文件夹再重试一次。&lt;/p>
&lt;p>完成后可以在 Aseprite 源码下的 build 文件夹内找到 bin 文件夹，可以重命名并移动到其他地方，里面的 &lt;code>aseprite.exe&lt;/code> 就是编译好的 Aseprite 主程序了。此时可以右键 &lt;code>aseprite.exe&lt;/code>，并 发送到 &amp;gt; 桌面快捷方式。&lt;/p>
&lt;h3 id="汉化可选">汉化（可选）&lt;/h3>
&lt;p>Aseprite 默认不含中文，但可以使用社区自制的中文汉化包。可以前往 &lt;a class="link" href="https://github.com/J-11/Aseprite-Simplified-Chinese/blob/master/README.md" target="_blank" rel="noopener"
>README&lt;/a> 查看并下载。&lt;/p>
&lt;h3 id="更新">更新&lt;/h3>
&lt;p>如果 Aseprite 有更新，手动编译相比直接在 Steam 购买还是有一些缺陷的，只能重新编译。下载新版的源码，按照上面流程再来一遍即可，麻烦是麻烦了点，但是可以白嫖还要什么自行车呢（&lt;/p></description></item><item><title>Mac风格 Ubuntu Desktop 美化教程</title><link>https://sorabs.cc/posts/ubuntu-desktop-mac-style/</link><pubDate>Tue, 27 Jul 2021 23:25:10 +0800</pubDate><guid>https://sorabs.cc/posts/ubuntu-desktop-mac-style/</guid><description>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/cover.jpg" alt="Featured image of post Mac风格 Ubuntu Desktop 美化教程" />&lt;p>前些天把树莓派 4B 的系统换成了 Ubuntu Desktop 21.04，使用没什么问题，驱动支持也非常好，遂美化之。&lt;/p>
&lt;p>本教程适用于任何 Ubuntu Desktop 系统（18.04 及以上），不仅限于树莓派。&lt;/p>
&lt;p>先看看美化前的效果：&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-1.jpg"
width="1360"
height="768"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-1_hu2b486e02c70a24c52ded4eb1ee9cd85e_49026_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-1_hu2b486e02c70a24c52ded4eb1ee9cd85e_49026_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="美化前 1"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-2.jpg"
width="1360"
height="768"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-2_hu5c55b2d7ef270645c5f24ae3a7745587_99115_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/before-beautify-2_hu5c55b2d7ef270645c5f24ae3a7745587_99115_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="美化前 2"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;p>再看看美化后：&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-1.jpg"
width="1360"
height="768"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-1_hud7408dd6b44d9d4da7de60b0f222f08f_122195_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-1_hud7408dd6b44d9d4da7de60b0f222f08f_122195_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="美化后 1"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>
&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-2.jpg"
width="1360"
height="768"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-2_hu616101f198156c3ef5430786dffff34a_112447_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/after-beautify-2_hu616101f198156c3ef5430786dffff34a_112447_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="美化后 2"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="425px"
>&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;ul>
&lt;li>一台安装了 Ubuntu Desktop 系统（18.04 版本及以上）的设备&lt;/li>
&lt;li>手&lt;/li>
&lt;/ul>
&lt;p>使用前请将软件源更新到最新版本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安装美化管理工具">安装美化管理工具&lt;/h2>
&lt;p>打开终端，安装 &lt;code>gnome-tweaks&lt;/code> 工具&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt install gnome-tweaks chrome-gnome-shell -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>随后打开 &lt;a class="link" href="https://extensions.gnome.org/" target="_blank" rel="noopener"
>https://extensions.gnome.org/&lt;/a> ，点击 &lt;code>Click here to install browser extension&lt;/code> 安装浏览器插件&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/install-browser-extension.png"
width="1265"
height="709"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/install-browser-extension_hud3226b62e892416ccfa0ea6163fc2fab_112470_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/install-browser-extension_hud3226b62e892416ccfa0ea6163fc2fab_112470_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="安装浏览器插件"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;p>随后搜索 &lt;a class="link" href="https://extensions.gnome.org/extension/19/user-themes/" target="_blank" rel="noopener"
>User Themes&lt;/a> 插件安装，点击页面右上角的开关，把&lt;code>OFF&lt;/code>改成&lt;code>ON&lt;/code>就可以了，如果弹出确认窗口就点确认&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/user-theme-extension.png"
width="1260"
height="706"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/user-theme-extension_hu64b895532979400b646b276b02f74381_96786_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/user-theme-extension_hu64b895532979400b646b276b02f74381_96786_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="安装插件"
class="gallery-image"
data-flex-grow="178"
data-flex-basis="428px"
>&lt;/p>
&lt;h2 id="dock-栏">Dock 栏&lt;/h2>
&lt;p>Ubuntu Desktop 自带的 Dock 栏并不是很好用，可定制性也不强，这里使用 &lt;code>Dash to Dock&lt;/code> 插件增强。&lt;/p>
&lt;p>向上面安装 &lt;code>User Theme&lt;/code> 插件一样，在 &lt;a class="link" href="https://extensions.gnome.org/" target="_blank" rel="noopener"
>https://extensions.gnome.org/&lt;/a> 中搜索 &lt;a class="link" href="https://extensions.gnome.org/extension/307/dash-to-dock/" target="_blank" rel="noopener"
>Dash to Dock&lt;/a> 并安装。&lt;/p>
&lt;p>然后去 Gnome Tweaks 里启用：&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/enable-dash-to-dock.png"
width="944"
height="610"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/enable-dash-to-dock_hu45a6b468070ccb066cd9f0b23d263097_69590_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/enable-dash-to-dock_hu45a6b468070ccb066cd9f0b23d263097_69590_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="启用 Dash to Dock 插件"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>随后你可以右键 Dock 栏上的应用抽屉图标，打开 Dash to Dock 设置，这里可以配置一系列设置，如位置、图标大小、透明度等等。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/dash-to-dock-settings.png"
width="598"
height="688"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/dash-to-dock-settings_hu24bb054581936ca7580bbaf2fdaa939b_63408_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/dash-to-dock-settings_hu24bb054581936ca7580bbaf2fdaa939b_63408_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dash to Dock 设置"
class="gallery-image"
data-flex-grow="86"
data-flex-basis="208px"
>&lt;/p>
&lt;h2 id="mac-风格主题安装">Mac 风格主题安装&lt;/h2>
&lt;p>文首那种 Mac 风格的美化包是 &lt;a class="link" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/" target="_blank" rel="noopener"
>WhiteSur-gtk-theme&lt;/a>。&lt;/p>
&lt;p>作者建议使用脚本方式安装，这样可以体验主题的全部功能，例如锁屏美化，Dock 栏美化等等。方法如下：&lt;/p>
&lt;p>确保你安装了 &lt;code>git&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt install git -y
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>将 GitHub 上的&lt;a class="link" href="https://github.com/vinceliuice/WhiteSur-gtk-theme/" target="_blank" rel="noopener"
>源码仓库&lt;/a>克隆到本地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/vinceliuice/WhiteSur-gtk-theme.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行安装：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> WhiteSur-gtk-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ chmod +x ./install.sh &lt;span class="c1"># 赋予可执行权限&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这会以默认的方式自动安装 WhiteSur 主题到系统。（同时安装亮/暗色，所有选项保持默认）&lt;/p>
&lt;h3 id="自定义安装">自定义安装&lt;/h3>
&lt;h4 id="基本配置">基本配置&lt;/h4>
&lt;p>这里列出了基本的主题配置选项&lt;/p>
&lt;h5 id="主题模式">主题模式&lt;/h5>
&lt;p>使用 &lt;code>-c&lt;/code> 或 &lt;code>--color&lt;/code> 选项选择主题模式（亮/暗色），可以重复使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./install.sh -c light &lt;span class="c1"># 只安装亮色&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./install.sh -c light -c dark &lt;span class="c1"># 亮暗色一起安装&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认：亮暗色一起安装&lt;/p>
&lt;h5 id="主题色">主题色&lt;/h5>
&lt;p>使用 &lt;code>-t&lt;/code> 或 &lt;code>--theme&lt;/code> 选项选择主题色，可以重复使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./install.sh -t red &lt;span class="c1"># 只安装红色&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./install.sh -t red -t blue &lt;span class="c1"># 安装红色和蓝色&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./install.sh -t all &lt;span class="c1"># 安装所有&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认：安装 &lt;code>default&lt;/code> 颜色&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/colors-themes.png"
width="978"
height="736"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/colors-themes_hu396f4f19e9c0ac908bdac674d3679127_95515_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/colors-themes_hu396f4f19e9c0ac908bdac674d3679127_95515_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="主题模式/主题色"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;h5 id="文件管理侧边栏宽度">文件管理侧边栏宽度&lt;/h5>
&lt;p>使用 &lt;code>-s&lt;/code> 或 &lt;code>--sidebar&lt;/code> 选项更改文件管理的侧边栏宽度&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./install.sh -s &lt;span class="m">220&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认：使用 &lt;code>default&lt;/code> 宽度&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/sidebars.png"
width="978"
height="282"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/sidebars_huc3566ea9b71695d6de19bab96ea5e501_31150_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/sidebars_huc3566ea9b71695d6de19bab96ea5e501_31150_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="文件管理侧边栏宽度"
class="gallery-image"
data-flex-grow="346"
data-flex-basis="832px"
>&lt;/p>
&lt;h5 id="活动窗口管理器图标">活动窗口管理器图标&lt;/h5>
&lt;p>使用 &lt;code>-i&lt;/code> 或 &lt;code>--icon&lt;/code> 选项更改活动窗口管理器的图标（最左上角的那个）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./install.sh -i ubuntu
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认：使用苹果 logo&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/icons.png"
width="978"
height="452"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/icons_hu3f22803408f916d88f61e7e2918e9f8e_65862_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/icons_hu3f22803408f916d88f61e7e2918e9f8e_65862_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="活动窗口管理器图标"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;h5 id="文件管理器样式">文件管理器样式&lt;/h5>
&lt;p>使用 &lt;code>-N&lt;/code> 或 &lt;code>--nautilus-style&lt;/code> 选项更改文件管理器的样式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./install.sh -N mojave
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认：&lt;code>default&lt;/code> 样式&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/nautilus.png"
width="978"
height="779"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/nautilus_huc2e027ed6d8c0d5eb422aac32ece32b0_82257_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/nautilus_huc2e027ed6d8c0d5eb422aac32ece32b0_82257_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="文件管理器样式"
class="gallery-image"
data-flex-grow="125"
data-flex-basis="301px"
>&lt;/p>
&lt;h4 id="进阶配置">进阶配置&lt;/h4>
&lt;p>这里列出了一些进阶配置，如 Firefox 浏览器美化，锁屏美化，Dash to Dock 美化等等&lt;/p>
&lt;p>需要用到 &lt;code>./tweaks.sh&lt;/code>，先赋予可执行权限：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod +x ./tweaks.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="firefox-火狐浏览器">Firefox 火狐浏览器&lt;/h5>
&lt;p>使用 &lt;code>-f&lt;/code> 或 &lt;code>--firefox&lt;/code> 选项更改 Firefox（火狐浏览器）的界面样式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./tweaks.sh -f &lt;span class="c1"># 使用默认样式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./tweaks.sh -f monterey &lt;span class="c1"># 使用 Monterey 样式&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-whitesur.jpg"
width="978"
height="500"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-whitesur_hu6c688f8f2c1fafff5590e13bbd72205c_39553_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-whitesur_hu6c688f8f2c1fafff5590e13bbd72205c_39553_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="WhiteSur 样式"
class="gallery-image"
data-flex-grow="195"
data-flex-basis="469px"
>&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-monterey.jpg"
width="1760"
height="960"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-monterey_huc9d7114cf6bfd7fd577e1098be1ae06c_107967_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/firefox-monterey_huc9d7114cf6bfd7fd577e1098be1ae06c_107967_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="Monterey 样式"
class="gallery-image"
data-flex-grow="183"
data-flex-basis="440px"
>&lt;/p>
&lt;h5 id="dash-to-dock">Dash to Dock&lt;/h5>
&lt;p>使用 &lt;code>-d&lt;/code> 或 &lt;code>--dash-to-dock&lt;/code> 选项更改 Dash to Dock 的样式&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ./tweaks.sh -d &lt;span class="c1"># 根据主题选择&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./tweaks.sh -d -c dark &lt;span class="c1"># 使用暗色&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/dash-to-dock.png"
width="978"
height="448"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/dash-to-dock_hu5ad5059d2907964c2af539545f4ca486_79163_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/dash-to-dock_hu5ad5059d2907964c2af539545f4ca486_79163_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Dash to Dock 样式"
class="gallery-image"
data-flex-grow="218"
data-flex-basis="523px"
>&lt;/p>
&lt;h5 id="锁屏样式">锁屏样式&lt;/h5>
&lt;p>使用 &lt;code>-g&lt;/code> 或 &lt;code>--gdm&lt;/code> 选项更改 Dash to Dock 的样式，需要以 root 身份运行。
&lt;code>-b&lt;/code>、&lt;code>-n&lt;/code>、&lt;code>-N&lt;/code> 选项可以搭配使用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g &lt;span class="c1"># 安装锁屏样式&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g -b &lt;span class="s2">&amp;#34;your picture.jpg&amp;#34;&lt;/span> &lt;span class="c1"># 自定义锁屏壁纸&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g -b default &lt;span class="c1"># 使用默认锁屏壁纸&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g -b blank &lt;span class="c1"># 不使用壁纸&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g -n &lt;span class="c1"># 不模糊壁纸&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ./tweaks.sh -g -N &lt;span class="c1"># 不调暗壁纸&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/gdm.jpg"
width="978"
height="1182"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/gdm_hu6c688f8f2c1fafff5590e13bbd72205c_70170_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur/gdm_hu6c688f8f2c1fafff5590e13bbd72205c_70170_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="锁屏样式"
class="gallery-image"
data-flex-grow="82"
data-flex-basis="198px"
>&lt;/p>
&lt;p>更多选项可以输入 &lt;code>./tweaks.sh -h&lt;/code> 来查看。&lt;/p>
&lt;h2 id="图标">图标&lt;/h2>
&lt;p>图标也可以使用 WhiteSur 的，来自于同一个作者。&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-1.jpg"
width="1253"
height="1440"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-1_hu8939c68a8f11ea3afa076c562aa483ae_138599_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-1_hu8939c68a8f11ea3afa076c562aa483ae_138599_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="预览 1"
class="gallery-image"
data-flex-grow="87"
data-flex-basis="208px"
>
&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-2.jpg"
width="1600"
height="1481"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-2_hu18ce52fe86d383a93fbdbd46dae1015d_136848_480x0_resize_q75_box.jpg 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/whitesur-icons/preview-2_hu18ce52fe86d383a93fbdbd46dae1015d_136848_1024x0_resize_q75_box.jpg 1024w"
loading="lazy"
alt="预览 2"
class="gallery-image"
data-flex-grow="108"
data-flex-basis="259px"
>&lt;/p>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>与主题本体类似，需要使用 &lt;code>git&lt;/code> 将仓库克隆到本地：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> WhiteSur-icon-theme
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ chmod +x ./install.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面列出了一些可用选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-d&lt;/code>, &lt;code>--dest&lt;/code> 定制主题安装目录 （默认为 &lt;code>$HOME/.themes&lt;/code>）&lt;/li>
&lt;li>&lt;code>-n&lt;/code>, &lt;code>--name&lt;/code> 定制图标主题名 （默认为 &lt;code>WhiteSur&lt;/code>）&lt;/li>
&lt;li>&lt;code>-t&lt;/code>, &lt;code>--theme&lt;/code> 定制主题色 [default/purple/pink/red/orange/yellow/green/grey/all] （默认为蓝色）&lt;/li>
&lt;li>&lt;code>-a&lt;/code>, &lt;code>--alternative&lt;/code> 为软件中心和文件管理器安装图标&lt;/li>
&lt;li>&lt;code>-b&lt;/code>, &lt;code>--bold &lt;/code> 安装加粗版本（推荐在高分屏下使用）&lt;/li>
&lt;li>&lt;code>--black&lt;/code> 安装黑色面板主题图标&lt;/li>
&lt;li>&lt;code>-h&lt;/code>, &lt;code>--help&lt;/code> 显示帮助信息&lt;/li>
&lt;/ul>
&lt;h3 id="应用主题">应用主题&lt;/h3>
&lt;p>有时主题不会自动应用至系统，这时需要手动打开一开始安装的美化管理工具。应用列表里找到 &lt;code>优化&lt;/code> 应用或者终端输入 &lt;code>gnome-tweaks&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://sorabs.cc/posts/ubuntu-desktop-mac-style/gnome-tweaks.png"
width="951"
height="614"
srcset="https://sorabs.cc/posts/ubuntu-desktop-mac-style/gnome-tweaks_huda4b4162c7c63071012bb1b4fb59a774_58223_480x0_resize_box_3.png 480w, https://sorabs.cc/posts/ubuntu-desktop-mac-style/gnome-tweaks_huda4b4162c7c63071012bb1b4fb59a774_58223_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="Gnome Tweaks 工具"
class="gallery-image"
data-flex-grow="154"
data-flex-basis="371px"
>&lt;/p>
&lt;p>都选择 WhiteSur 即可。如果配置后不生效，重启后即可看到效果。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/vinceliuice/WhiteSur-gtk-theme" target="_blank" rel="noopener"
>WhiteSur-gtk-theme GitHub 仓库&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>