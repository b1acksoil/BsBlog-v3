[{"content":"最近入了 Arch Linux 的坑，手上没有空闲的机子可以装着玩，虚拟机又有点膈应的感觉，就找了找资料在 WSL2 上装了体验一下。\n关于 WSL1 和 WSL2 的区别，不在本文的讨论范围内，可以前往微软的官方说明查看。\n本文中，以 \u0026gt; 开头的命令为 Powershell 命令，# 开头为 Arch 中的 root 用户命令，$ 开头为 Arch 中的普通用户命令。\n准备工作 Windows 10 2004 版本或以上（我使用的是 Windows 11） 可选功能中打开适用于 Linux 的 Windows 子系统和虚拟机平台 首先前往 这里 下载 WSL 的内核更新包，不然没法安装。\n安装后将 WSL 的默认版本设置为 WSL2：\n1 \u0026gt; wsl --set-default-version 2 安装 Arch 前往 项目仓库 (yuk7/ArchWSL) 的 Releases 页面下载最新的 Arch.zip，并解压到具有写权限的空文件夹里。留意 Arch.exe 的名称，.exe 前的部分会作为稍后在 WSL 内注册的发行版名称，例如改名成 ArchLinux.exe，稍后的实例就叫 ArchLinux。\n多个 Arch 共存 由于这里的 Arch 是通过文件安装，只要将 exe 文件复制并改名即可。注意改名后的文件不要和已有的实例名称重复。 双击打开 Arch.exe，程序会自动注册 rootfs 和注册表配置。\n创建默认用户 直接使用 root 用户很不安全，这里我们创建一个新的用户代替 root 进行日常使用。\n1 # useradd -m -G wheel -s /bin/bash bs 这里的 bs 是用户名称，将其换成你自己的。然后为新用户设置密码：\n1 # passwd bs 为了使新用户可以使用 sudo 权限，编辑 /etc/sudoers 文件，找到 root ALL=(ALL:ALL) ALL，在其下添加一行 bs ALL=(ALL:ALL) ALL （bs 同样换成刚刚的用户名）；并找到 #%wheel ALL=(ALL:ALL) ALL，将其取消注释（去掉最前面的 #）\n找不到编辑器 如果没有自己常用的编辑器（如 vim），可以先跳到下面的 Pacman 配置小节，然后自行安装。 改好了是这样的：\n1 2 3 4 root ALL=(ALL:ALL) ALL bs ALL=(ALL:ALL) ALL %wheel ALL=(ALL:ALL) ALL 然后使用 exit 退出 Arch 交互界面，打开 Powershell，切换到 Arch 目录，输入以下命令将默认登录用户切换为刚刚创建的新用户：\n1 \u0026gt; Arch.exe config --default-user bs 配置 Pacman 打开 Arch.exe 进入命令行。\n由于众所周知的原因，国内访问 Arch 的软件源十分缓慢，这里将源换为清华大学开源镜像站的源。\n编辑 /etc/pacman.d/mirrorlist，往下翻找到 China 一栏，将 https://mirrors.tuna.tsinghua.edu.cn 行取消注释。也可以多取消几个注释作为后备。如果懒得找也可以直接在文件开头添加：\n1 Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch 初始化 Pacman 的密钥环：\n未创建新用户 如果刚刚没有创建用来代替 root 的新用户，请将本节命令中的 sudo 去除， 1 2 3 $ sudo pacman-key --init $ sudo pacman-key --populate $ sudo pacman -Syy archlinux-keyring 执行滚动更新：\n1 $ sudo pacman -Syu 搭建完成 这样就配置好了一个基本的 Arch Linux 环境了，但仍然是一个空壳子，接下来给它配置一些常用服务。 安装包管理器 yay yay 是一个广泛使用的 AUR Helper，解决了 pacman 无法安装 AUR 软件的问题，同时完全兼容 pacman 操作。\n首先安装必要软件包：\n1 $ sudo pacman -S base-devel git 安装 yay-bin（如果直接安装 yay 则需要自己编译）：\n1 2 3 4 5 $ cd ~ $ git clone https://aur.archlinux.org/yay-bin.git $ cd yay-bin $ makepkg -si $ yay 安装 oh-my-zsh oh-my-zsh 是一个常用的 zsh 框架，提供了许多美观的主题和实用插件，能极大提升 shell 下的效率。\n1 2 $ yay -S zsh curl $ sh -c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 安装基本插件，这里我安装了自己常用的 zsh-autosuggestions 和 zsh-syntax-highlighting 来提供自动补全和语法高亮。\n1 2 3 $ cd ~/.oh-my-zsh/plugins $ git clone https://github.com/zsh-users/zsh-autosuggestions.git --depth 1 $ git clone https://github.com/zsh-users/zsh-syntax-highlighting.git --depth 1 编辑 ~/.zshrc，找到 plugins，在 git 后面添加插件名称，使用空格或空行分隔。也可以往上找到 ZSH_THEME 并修改主题。\n","date":"2022-10-01T09:38:08+08:00","image":"https://sorabs.cc/posts/wsl2-arch/cover_hu33e4827e4f1cec4102b61099883c8097_54721_120x120_fill_q75_box_smart1.jpg","permalink":"https://sorabs.cc/posts/wsl2-arch/","title":"使用 WSL2 部署 Arch Linux 环境"},{"content":"起因 经常需要在电脑和手机之间互传文件，想了不少办法，最早是使用 QQ 等聊天工具进行文件传输，效率十分低下；后来找到了 SnapDrop 这款工具，可以以类似面对面快传的方式在局域网内传输文件，提高了些许效率，但还是感觉到些许别扭。于是开始找寻一种更为优雅的文件传输方式，想到手里有一个半吃灰的树莓派，就开始着手搭建自己的 FTP 文件服务器。\n什么是 FTP 文件传输协议（File Transfer Protocol，缩写 FTP）是一个用于在计算机网络上在客户端和服务器之间进行文件传输的应用层协议。 相比 WebDav 等其他传输协议，纯 FTP 的安全性略显低下，但对于小型自用而言已经绰绰有余。\n搭建 关于树莓派 本文中使用的树莓派信息如下：\n型号：4B\nRAM：4GB\n系统：Ubuntu Server 22.04 首先安装软件包 vsftpd\n1 $ sudo apt install vsftpd -y 安装过程中会自动创建一个名为 ftp 的用户，我们给它设置一个密码作为稍后的登录密码（若打算开启匿名登录可跳过）：\n1 $ sudo passwd ftp FTP 文件存放位置 FTP 服务开启后的文件存储位置就是 frp 用户的家目录，位于 /srv/ftp 密码更改完成后，选用喜欢的编辑器打开 FTP 服务器配置文件 /etc/vsftpd.conf，按照需求取消注释（去掉行首的 # 号）或修改相应选项（如果找不到被注释的选项在哪里也可以直接在文件末尾添加，格式为 选项=值）。这里列出几个常用的，YES/NO 分别对应是/否：\n通用\nlocal_enable：是否允许本地用户登录\nwrite_enable：是否允许写入操作（上传文件、新建文件夹等）\nutf8_filesystem：启用 UTF-8 支持\n匿名登录相关\nanonymous_enable：是否允许匿名登录\nanon_upload_enable：是否允许匿名用户上传文件\nanon_mkdir_write_enable：是否允许匿名用户新建文件夹\nChroot 相关\nchroot_local_user：是否将连接 FTP 的本地用户的根目录限制为其家目录（/home/\u0026lt;username\u0026gt;）\nchroot_list_enable：启用 chroot 白名单，只有在其中的用户才会被 chroot（如果把 chroot_local_user 设置为 YES 将变为黑名单，只有在其中的用户不会被 chroot）\nchroot_list_file：chroot 黑/白名单的文件路径，文件中填写用户名，一行一个\n注：如果只设置 chroot_local_user 为 YES 而不设置黑/白名单，会对所有连接 FTP 的本地用户进行 chroot。\n修改好配置后重启 FTP 服务：\n1 $ sudo systemctl restart vsftpd 连接 查看树莓派 IP，可以使用 ip addr 或 ifconfig 等等方式。这里举例为 192.168.0.114，后续命令中记得替换成自己的。\n使用 FTP 工具进行连接测试，这里先使用 Linux 和 Windows 都自带的 ftp 命令：\n1 $ ftp 192.168.0.114 提示输入用户名和密码，用户名输入 ftp，密码输入之前设置的密码，若设置了匿名就直接留空回车。\n1 2 3 4 5 6 7 Connected to 192.168.0.114. 220 (vsFTPd 3.0.5) Name (192.168.0.114:bs): ftp 331 Please specify the password. Password: 230 Login successful. ftp\u0026gt; 成功进入 FTP Shell 后可以输入 ls，pwd 等命令进行测试，使用 quit 退出。\n搭建完成 一个简单的 FTP 服务器已经搭建完毕，可以使用各种 FTP 工具连接使用。\n如果搭建过程中遇到问题，可以参考文章后面的问题解决部分。\n体验 搭建完成后，我分别使用移动端的 MT 管理器、和 Windows 自带的网络位置进行了测试。在 MT 管理器下连接后操作十分流畅，上传/下载的速度也很快。而 Windows 自带的网络位置则十分难用，打开文件只打开了一个空的 Edge，复制文件十分缓慢，新建文件夹需要延迟很久，删除文件也经常删不掉。fkms\n但尽管如此，通过 FTP 传输文件仍然带来了一种全新的体验：手机上将文件移进”文件夹“，转眼就能在电脑上移出来使用，做到了几近原生、无缝的传输体验。相信如果解决了 Windows 端的工具问题，效率会大大提升。\n问题解决 无法登录进 FTP Shell Ubuntu 官网的说明 To allow users with a shell of /usr/sbin/nologin access to FTP, but have no shell access, edit /etc/shells adding the nologin shell.\nThis is necessary because, by default vsftpd uses PAM for authentication, and the /etc/pam.d/vsftpd configuration file contains:\nauth required pam_shells.so\nThe shells PAM module restricts access to shells listed in the /etc/shells file.\n摘自这里\n解决办法：编辑 /etc/shells，在文件末尾添加一行 /usr/sbin/nologin\n550 create directory operation failed 如果设置了 write_enable 后仍不能创建文件夹，需要确保根目录具有可执行权限。执行以下命令：\n1 $ chmod 777 -R /srv/ftp vsftpd: refusing to run with writable root inside chroot 如果设置了 chroot 后无法新建文件夹/上传文件，并提示以上信息，是因为 2.3.5 版本后 vsftpd 加强了安全检查，用户的主目录不能再有写权限，如果检查到就会报错。可以在配置文件中添加 allow_writeable_chroot=YES 来解决。\n参考自这里\n","date":"2022-09-14T20:34:14+08:00","image":"https://sorabs.cc/posts/raspberrypi-ftp-server/cover_hu9e7cb5a45df0cdaf3fb81de0a36b0a5e_155771_120x120_fill_q75_box_smart1.jpg","permalink":"https://sorabs.cc/posts/raspberrypi-ftp-server/","title":"树莓派搭建 FTP 服务器实现局域网文件共享"},{"content":"Typography 隐藏文字，鼠标悬停（移动端点击）以展示： HUGO YES!\nShortcodes Tip Information Information tip test. Note Note tip test. Warning Warning tip test. Error Error tip test. Success Success tip test. Quote Quote tip test. Example Example tip test. 这是一段长文本 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. ","date":"2022-09-13T21:25:32+08:00","image":"https://sorabs.cc/posts/testground/cover_huc792f4b39d5c3e81ac227f21be32ba93_31697_120x120_fill_box_smart1_3.png","permalink":"https://sorabs.cc/posts/testground/","title":"测试场 | TestGround"},{"content":"一直听说星露谷对于 Mod 的支持十分完善，这次打算自己尝试一番。\n注意 本文仅针对 Windows 平台，其他平台方法大同小异，可以直接参照官方 Wiki。 首先到 SMAPI 官网下载最新的安装包，可以选择从 NexusMods (N 网) 下载，也可以直接下载 (Direct download)。截至本文，SMAPI 的最新版本为 3.16.2。\n把下载下来的 SMAPI-\u0026lt;版本\u0026gt;-installer.zip 解压到任意位置，打开里面的 install on Windows.bat，安装脚本会自动检测游戏的安装位置。如果没有找到会提示以下信息：\n1 2 3 Oops, couldn\u0026#39;t find the game automatically. Type the file path to the game directory (the one containing \u0026#39;Stardew Valley.dll\u0026#39;), then press enter. 出现这种情况，首先找到星露谷的安装目录，若为 Steam 安装可以直接右键库里的星露谷，选择管理 - 浏览本地文件，然后复制打开的文件夹路径（例如我的是 D:\\Steam\\steamapps\\common\\Stardew Valley），再粘贴进终端内并回车。\n1 2 3 4 5 6 What do you want to do? [1] Install SMAPI. [2] Uninstall SMAPI. Type 1 or 2, then press enter. 输入 1 并回车继续安装。日后如果想要卸载 SMAPI，可以再次运行此脚本并选择 2 卸载。\n如果出现以下信息，则为安装成功：\n1 2 3 4 SMAPI is installed! If you use Steam, set your launch options to enable achievements (see smapi.io/install): \u0026#34;D:\\Steam\\steamapps\\common\\Stardew Valley\\StardewModdingAPI.exe\u0026#34; %command% If you don\u0026#39;t use Steam, launch StardewModdingAPI.exe in your game folder to play with mods. 提示信息中指出，如果使用 Steam 启动游戏，可以设置启动项来确保安装 SMAPI 后也能正常获得成就。\n注意 在配置Steam启动项之前，需要确保您的游戏路径里没有中文，否则将设置失败。 首先复制终端窗口中给出的启动指令（如上文，为 \u0026quot;D:\\Steam\\steamapps\\common\\Stardew Valley\\StardewModdingAPI.exe\u0026quot; %command%），Steam 中右键星露谷打开属性，在“通用”选项卡中把复制的指令粘贴进“启动选项”一栏，保存即可。\n至此已经完成了 SMAPI 的安装，至于添加 Mod 下次再讲 （咕咕咕（（\n","date":"2022-09-13T19:34:50+08:00","permalink":"https://sorabs.cc/posts/smapi-install/","title":"星露谷模组加载器 —— SMAPI 的安装"},{"content":"很久没写博客了，前些天看到几个群友的博客，心血来潮想把自己的复兴一下\n发展历程 在此前已经有过两版博客，但由于懒惰等原因（）现在都废弃了。\nv1 - Hexo 最早的一版基于 Hexo 搭建，主题使用自定义程度极高的 butterfly，也草草写过几篇文章。但也正因为自定义程度极高，导致花费大量时间去折腾，反而丢了写博客的初衷。而且 butterfly 主题引用大量的 js 文件和各种图片资源，博客变得非常臃肿，再加上 GitHub Pages 的网络因素，加载非常耗时，不久就放弃了。\nv2 - Vue 沉寂一段时间之后突然心痒痒，又打算重做一个博客。这时候已经学过了 Vue.js，就抛弃了原有的 Hexo 架构，为了追求极致的开始自己从头写起。最终成品为单页面应用，同时使用自己写的 CLI 工具管理文章、图片等资源。但 v1 时 butterfly 的自定义就花费大量精力了，自己写指挥更甚。再者单页面应用对于 SEO 优化不是友好，也没有多余的服务器搞服务端渲染，加上技术不到位导致成品各种瑕疵\u0026hellip;多方面因素之下，第二版也放弃了。\nv3 - Hugo! 又隔了很久，直到最近才打算把博客重新搭起来，不然有时的一些想法也没法记录。参考了上次的教训，这次依然是在已有的博客框架中选择。寻觅一番后，最终选择了 Hugo。Hugo 与 Hexo 类似，同为静态网站生成引擎。但 Hexo 使用 Node.js 编写，而 Hugo 使用 Go，性能远远超过前者。（写到这里的时候测试了一下，执行生成操作的耗时仅有 1262ms，而印象中以前 Hexo 需要数十秒）；而且得益于 Go 语言的特性，Hugo 的所有环境只有一个简单的可执行文件，比起 Hexo 麻烦的环境配置好上太多。\n总结 从几版的经验可以看出，次次都在舍本逐末，钻研各种配置，却忘记了写文章的初衷。希望这一次的 v3 可以让自己反思一下，坚持下去。\n","date":"2022-09-12T15:44:45+08:00","permalink":"https://sorabs.cc/posts/brand-new-blog-v3/","title":"Brand New Blog v3"},{"content":"最近学 2D 游戏开发，想自己画点像素画，就去找了找有什么好用的像素画软件。首先就想到了大名鼎鼎的 Aseprite，去 Steam 上搜了下，70RMB。\n对于穷学生党来说 70 也不少了（）何况我年初收了一台米板 2，目前处于囊中羞涩的状态。搜索一番发现 Aseprite 居然是在 GitHub 上开源的，官方 repo 里也提供了编译说明，遂自行编译之。\n本文仅涉及 Windows 平台下的编译，若是 macOS 或是 Linux 平台可自行查看官方编译说明（方法大同小异，甚至更简单，因为不用装 VS）\n平台：Windows 10\n准备工作 安装 Visual Studio 2019+ Windows 下的编译需要用到 Visual Studio Community （微软的 IDE）的 2019 或以上的版本，我使用的是 VS2022\n前往 Visual Studio Downloads 下载社区版\n下载完成打开安装程序，选择 “使用 C++ 的桌面开发”，并在右侧至少勾选 “MSVC C++ x64/x86 生成工具” 和 “Windows 10 SDK”，然后点击安装。\n安装 Cmake 前往 Cmake 官网，在下方的 Binary distributions 中找到最新的 msi 安装文件并下载。\n安装时选择第二个或者第三个就不用自己配置环境变量：\n记下 Cmake 的安装目录，稍后会用到。\n关于 MinGW Aseprite 编译不支持 MinGW，所以对于 MinGW 用户，需要将环境变量中的 MinGW 删除。 安装 Ninja 前往 Ninja Releases 下载 ninja-win.zip\n打开 Cmake 的安装目录，并把 ninja-win.zip 中的 ninja.exe 解压到 \u0026lt;Cmake安装目录\u0026gt;\\bin 下\n下载 Skia-m96 前往 Skia Releases 根据系统位数下载 Skia-Windows-Release.zip，我的系统是 64 位的所以下载 x64 版本。 注意下载的是 m96 版本，不要下错了。\n下载完解压好，记下位置，放在一旁备用。\n编译 Aseprite 下载 Aseprite 源码 前往 Aseprite Releases 下载 Aseprite-\u0026lt;version\u0026gt;-Source.zip 并解压，会使用 git 的也可以直接克隆仓库 https://github.com/aseprite/aseprite.git\n开始编译 在开始菜单的 Visual Studio 文件夹里找到 x64 Native Tools Command Prompt for VS（32 位打开 x86）\n初始化完成后输入 cd \u0026lt;Aseprite源码目录\u0026gt; 切换到源码目录下，如果在另一个分区则需要先用 \u0026lt;盘符\u0026gt;: 切换。如默认打开了 D:\\Microsoft Visual Studio\\2022\\Community，而我的源码在 C:\\Users\\b1acksoil\\Downloads\\Aseprite-Source 里：\n1 2 C: cd C:\\Users\\b1acksoil\\Downloads\\Aseprite-Source 依次输入以下命令，第三条命令中将尖括号的内容（包括尖括号）替换为刚刚下载 Skia 解压后的文件夹：\n1 2 3 mkdir build cd build cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLAF_BACKEND=skia -DSKIA_DIR=\u0026#34;\u0026lt;Skia目录\u0026gt;\u0026#34; -DSKIA_LIBRARY_DIR=\u0026#34;\u0026lt;Skia目录\u0026gt;\\out\\Release-x64\u0026#34; -DSKIA_LIBRARY=\u0026#34;\u0026lt;Skia目录\u0026gt;\\out\\Release-x64\\skia.lib\u0026#34; -G Ninja .. 随后等待第一段编译，时间取决于你的电脑性能。结束后输入：\n1 ninja aseprite 期间最好不要做其他事情，性能差的电脑可以把后台清一清，否则可能会卡到一半。可以开个任务管理器看看，编译很占 CPU，如果 CPU 占用突然下去了并且命令行长时间不动了，就是卡住了，使用 Ctrl+C 终止，输入 cd ..，删除 Aseprite 源码下的 build 文件夹再重试一次。\n完成后可以在 Aseprite 源码下的 build 文件夹内找到 bin 文件夹，可以重命名并移动到其他地方，里面的 aseprite.exe 就是编译好的 Aseprite 主程序了。此时可以右键 aseprite.exe，并 发送到 \u0026gt; 桌面快捷方式。\n汉化（可选） Aseprite 默认不含中文，但可以使用社区自制的中文汉化包。可以前往 README 查看并下载。\n更新 如果 Aseprite 有更新，手动编译相比直接在 Steam 购买还是有一些缺陷的，只能重新编译。下载新版的源码，按照上面流程再来一遍即可，麻烦是麻烦了点，但是可以白嫖还要什么自行车呢（\n","date":"2022-02-09T19:00:12+08:00","image":"https://sorabs.cc/posts/manually-compile-aseprite/cover_hu33e4827e4f1cec4102b61099883c8097_67249_120x120_fill_q75_box_smart1.jpg","permalink":"https://sorabs.cc/posts/manually-compile-aseprite/","title":"手动编译像素画软件 Aseprite"},{"content":"前些天把树莓派 4B 的系统换成了 Ubuntu Desktop 21.04，使用没什么问题，驱动支持也非常好，遂美化之。\n本教程适用于任何 Ubuntu Desktop 系统（18.04 及以上），不仅限于树莓派。\n先看看美化前的效果：\n再看看美化后：\n准备工作 一台安装了 Ubuntu Desktop 系统（18.04 版本及以上）的设备 手 使用前请将软件源更新到最新版本：\n1 $ sudo apt update 安装美化管理工具 打开终端，安装 gnome-tweaks 工具\n1 $ sudo apt install gnome-tweaks chrome-gnome-shell -y 随后打开 https://extensions.gnome.org/ ，点击 Click here to install browser extension 安装浏览器插件\n随后搜索 User Themes 插件安装，点击页面右上角的开关，把OFF改成ON就可以了，如果弹出确认窗口就点确认\nDock 栏 Ubuntu Desktop 自带的 Dock 栏并不是很好用，可定制性也不强，这里使用 Dash to Dock 插件增强。\n向上面安装 User Theme 插件一样，在 https://extensions.gnome.org/ 中搜索 Dash to Dock 并安装。\n然后去 Gnome Tweaks 里启用：\n随后你可以右键 Dock 栏上的应用抽屉图标，打开 Dash to Dock 设置，这里可以配置一系列设置，如位置、图标大小、透明度等等。\nMac 风格主题安装 文首那种 Mac 风格的美化包是 WhiteSur-gtk-theme。\n作者建议使用脚本方式安装，这样可以体验主题的全部功能，例如锁屏美化，Dock 栏美化等等。方法如下：\n确保你安装了 git：\n1 $ sudo apt install git -y 将 GitHub 上的源码仓库克隆到本地：\n1 $ git clone https://github.com/vinceliuice/WhiteSur-gtk-theme.git 执行安装：\n1 2 3 $ cd WhiteSur-gtk-theme $ chmod +x ./install.sh # 赋予可执行权限 $ ./install.sh 这会以默认的方式自动安装 WhiteSur 主题到系统。（同时安装亮/暗色，所有选项保持默认）\n自定义安装 基本配置 这里列出了基本的主题配置选项\n主题模式 使用 -c 或 --color 选项选择主题模式（亮/暗色），可以重复使用\n1 2 $ ./install.sh -c light # 只安装亮色 $ ./install.sh -c light -c dark # 亮暗色一起安装 默认：亮暗色一起安装\n主题色 使用 -t 或 --theme 选项选择主题色，可以重复使用\n1 2 3 $ ./install.sh -t red # 只安装红色 $ ./install.sh -t red -t blue # 安装红色和蓝色 $ ./install.sh -t all # 安装所有 默认：安装 default 颜色\n文件管理侧边栏宽度 使用 -s 或 --sidebar 选项更改文件管理的侧边栏宽度\n1 $ ./install.sh -s 220 默认：使用 default 宽度\n活动窗口管理器图标 使用 -i 或 --icon 选项更改活动窗口管理器的图标（最左上角的那个）\n1 $ ./install.sh -i ubuntu 默认：使用苹果 logo\n文件管理器样式 使用 -N 或 --nautilus-style 选项更改文件管理器的样式\n1 $ ./install.sh -N mojave 默认：default 样式\n进阶配置 这里列出了一些进阶配置，如 Firefox 浏览器美化，锁屏美化，Dash to Dock 美化等等\n需要用到 ./tweaks.sh，先赋予可执行权限：\n1 $ chmod +x ./tweaks.sh Firefox 火狐浏览器 使用 -f 或 --firefox 选项更改 Firefox（火狐浏览器）的界面样式\n1 2 $ ./tweaks.sh -f # 使用默认样式 $ ./tweaks.sh -f monterey # 使用 Monterey 样式 Dash to Dock 使用 -d 或 --dash-to-dock 选项更改 Dash to Dock 的样式\n1 2 $ ./tweaks.sh -d # 根据主题选择 $ ./tweaks.sh -d -c dark # 使用暗色 锁屏样式 使用 -g 或 --gdm 选项更改 Dash to Dock 的样式，需要以 root 身份运行。 -b、-n、-N 选项可以搭配使用。\n1 2 3 4 5 6 $ sudo ./tweaks.sh -g # 安装锁屏样式 $ sudo ./tweaks.sh -g -b \u0026#34;your picture.jpg\u0026#34; # 自定义锁屏壁纸 $ sudo ./tweaks.sh -g -b default # 使用默认锁屏壁纸 $ sudo ./tweaks.sh -g -b blank # 不使用壁纸 $ sudo ./tweaks.sh -g -n # 不模糊壁纸 $ sudo ./tweaks.sh -g -N # 不调暗壁纸 更多选项可以输入 ./tweaks.sh -h 来查看。\n图标 图标也可以使用 WhiteSur 的，来自于同一个作者。\n安装 与主题本体类似，需要使用 git 将仓库克隆到本地：\n1 2 3 4 $ git clone https://github.com/vinceliuice/WhiteSur-icon-theme.git $ cd WhiteSur-icon-theme $ chmod +x ./install.sh $ ./install.sh 下面列出了一些可用选项：\n-d, --dest 定制主题安装目录 （默认为 $HOME/.themes） -n, --name 定制图标主题名 （默认为 WhiteSur） -t, --theme 定制主题色 [default/purple/pink/red/orange/yellow/green/grey/all] （默认为蓝色） -a, --alternative 为软件中心和文件管理器安装图标 -b, --bold 安装加粗版本（推荐在高分屏下使用） --black 安装黑色面板主题图标 -h, --help 显示帮助信息 应用主题 有时主题不会自动应用至系统，这时需要手动打开一开始安装的美化管理工具。应用列表里找到 优化 应用或者终端输入 gnome-tweaks\n都选择 WhiteSur 即可。如果配置后不生效，重启后即可看到效果。\n参考 WhiteSur-gtk-theme GitHub 仓库 ","date":"2021-07-27T23:25:10+08:00","image":"https://sorabs.cc/posts/ubuntu-desktop-mac-style/cover_hu57b1fac583eb5e56d9ebcd616bc65806_81861_120x120_fill_q75_box_smart1.jpg","permalink":"https://sorabs.cc/posts/ubuntu-desktop-mac-style/","title":"Mac风格 Ubuntu Desktop 美化教程"}]